{"name":"Jobukyu","tagline":"A flexible, REST-based job queue","body":"Jobukyu\r\n=======\r\n\r\nA flexible, REST-based job queue. \r\n\r\n\r\nFeatures\r\n---\r\n\r\n- Create, modify, and remove jobs via a REST API\r\n- Store arbitrary data in the job\r\n- Transmit data on job updates via Web Hooks\r\n\r\nWhy Jobukyu?\r\n---\r\n\r\nAt Axisto Media, we had a requirement to run a processor-intensive task (generating images of slides from a PDF file) on a server separate to those running the web application.\r\n\r\nWe originally tried Kue, but encountered issues using it, and so decided to create a tool that handled failing jobs gracefully.\r\n\r\nIn order to cater for the different kind of processor-intensive jobs we handle at Axisto, we created a tool that did not require implicit knowledge of our web application - it simply provided a REST API that the web application could interact with, store any kind of JSON data that we needed the job worker to know, and a way for the Job Queue to communicate the state of those jobs back to the web application.\r\n\r\n\r\n\r\nDependencies\r\n---\r\n\r\n* Node.js (0.10+)\r\n* MongoDB (2.4.6+)\r\n\r\nInstallation and Boot\r\n---\r\n\r\n    git clone git@github.com:sc-live/jobukyu.git\r\n    cd jobukyu\r\n    npm install\r\n\r\nThen, make a copy of the config.example.js file\r\n\r\n    npm run config\r\n\r\n... and supply your preferred database credentials and port to run the app on.\r\n\r\nBoot the server\r\n\r\n    npm start\r\n\r\nUsage\r\n---\r\n\r\nThe Job Queue is accessed via a REST API. There is a single resource called <code>job</code>.\r\n\r\nREST API\r\n---\r\n\r\n    GET     /jobs                 Lists all of the jobs in the queue, regardless of status\r\n    POST    /jobs                 Creates a job\r\n    GET     /jobs/new             Lists all of the jobs that are yet to be processed\r\n    GET     /jobs/processing      Lists all of the jobs that are being processed\r\n    GET     /jobs/completed       Lists all of the jobs that have completed\r\n    GET     /jobs/failed          Lists all of the jobs that failed\r\n    GET     /jobs/search          Search for jobs based on search criteria\r\n    GET     /jobs/:id             Shows a job's details\r\n    PUT     /jobs/:id             Updates a job\r\n    PUT     /jobs/:id/take        Marks a job's status as 'processing', so that no other workers can take it\r\n    PUT     /jobs/:id/release     Marks a job's status as 'new', so that other workers can take it\r\n    PUT     /jobs/:id/complete    Marks a job's status as 'completed'\r\n    PUT     /jobs/:id/fail        Marks a job's status as 'failed'\r\n    PUT     /jobs/:id/retry       Marks a job's status from 'failed' to 'new'\r\n    DELETE  /jobs/:id             Deletes a job from the queue\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}